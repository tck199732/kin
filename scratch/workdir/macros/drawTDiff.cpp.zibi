#include <vector>
#include "TChain.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TMath.h"
#include "TCanvas.h"
#include "TFile.h"
#include "TStyle.h"
using std::vector;

bool debug = 0;
void drawTDiff(const char* directory, std::vector<const char*> files, const char* filenameOut, const char* filename_dt_offsets="newcalib.txt"){

  std::ifstream infile_dt_offsets(filename_dt_offsets);
    if (!infile_dt_offsets.is_open()) {
        std::cerr << "Could not open file " << filename_dt_offsets << std::endl;
        return;
    }
    int detid=0;
    const int nofdet = 72;
    double offset[nofdet];
    double timeoffset[nofdet];
    for (int i=0; i<nofdet; i++)
      {
	offset[i]=0;
	timeoffset[i] = 0;
      }
    float temp; 
    std::string line;
    while (std::getline(infile_dt_offsets, line)) {
        // Skip comment lines
        if (line[0] == '#') continue;
        std::stringstream ss(line);
	ss >> detid >> offset[detid] >> timeoffset[detid];
	cout<<detid<<"\t"<<offset[detid]<<"\t"<<timeoffset[detid]<<endl;
    }
    //    gStyle->SetOptStat(0);

	// initialize and fill chain
	TChain* chain = new TChain("tree");
	
	for(int i = 0; i < files.size(); i++){
		TString path(directory);
		if(!path.EndsWith("/")) path += "/";
		path += files[i];
		chain->AddFile(path);
	}
	
	int tdiff_nbins = 60;
	
	// initialize histograms
	TH1F hTof("hTof", "ToF (uncalibrated)", 10000, -300, 500);
	TH2F hTofVsModuleID("hTofVsModuleID", "ToF vs. module ID", 72, 0, 72, 10000, -150, 250);

	TH2F hTotVsTof("hTotVsTof", "ToT vs. ToF", 200, -200, 500, 100, 0, 75);
	TH2F hModuleIDVsTDiff("hModuleIDVsTDiff", "Time difference between PMTs vs. module ID", 400, -25, 25, 72, 0, 72);
	TH2F hModuleIDVsTDiffL1gated("hModuleIDVsTDiffL1gated", "Time difference between PMTs vs. module ID(L1)", tdiff_nbins, -12, 12, 24, 0, 24);
	TH2F hModuleIDVsTDiffL2gated("hModuleIDVsTDiffL2gated", "Time difference between PMTs vs. module ID(L2)", tdiff_nbins, -12, 12, 24, 24, 48);
	TH2F hModuleIDVsTDiffL3gated("hModuleIDVsTDiffL3gated", "Time difference between PMTs vs. module ID(L3)", tdiff_nbins, -12, 12, 24, 48, 72);
	TH2F hModuleIDVsTDiffL1("hModuleIDVsTDiffL1", "Time difference between PMTs vs. module ID(L1)", tdiff_nbins, -12, 12, 24, 0, 24);
	TH2F hModuleIDVsTDiffL2("hModuleIDVsTDiffL2", "Time difference between PMTs vs. module ID(L2)", tdiff_nbins, -12, 12, 24, 24, 48);
	TH2F hModuleIDVsTDiffL3("hModuleIDVsTDiffL3", "Time difference between PMTs vs. module ID(L3)", tdiff_nbins, -12, 12, 24, 48, 72);
	hTof.GetXaxis()->SetTitle("ToF (ns)");
	hTof.GetYaxis()->SetTitle("Counts (1/(4ns))");
	hTofVsModuleID.GetXaxis()->SetTitle("ModuleID");
	hTofVsModuleID.GetYaxis()->SetTitle("ToF (ns)");
	hTotVsTof.GetXaxis()->SetTitle("ToF (ns)");
	hTotVsTof.GetYaxis()->SetTitle("ToT (ns)");
	hModuleIDVsTDiff.GetXaxis()->SetTitle("Module ID");
	hModuleIDVsTDiff.GetYaxis()->SetTitle("Time difference (ns)");
	
	// get data from chain
	vector<float>* tofRaw = nullptr; 
	vector<float>* tDiff = nullptr; 
	vector<float>* tot0 = nullptr;
	vector<float>* t0 = nullptr;
	vector<float>* t1 = nullptr;
	vector<float>* tot1 = nullptr;
	vector<int>* moduleID = nullptr;
	int nHits;
	chain->SetBranchAddress("nHits", &nHits);
	chain->SetBranchAddress("tDiff", &tDiff);
	chain->SetBranchAddress("tofRaw", &tofRaw);
	//chain->SetBranchAddress("t0", &t0);
	//chain->SetBranchAddress("t1", &t1);
	chain->SetBranchAddress("tot0", &tot0);
	chain->SetBranchAddress("tot1", &tot1);
	chain->SetBranchAddress("moduleID", &moduleID);


	bool calibrationBarL1Hit;
	bool calibrationBarL2Hit;
	bool calibrationBarL3Hit;
	bool calibration_Det36_Hit;
	double tofCalib;
	// loop over events: fill histograms
	long nEvents = chain->GetEntries();

	    cout<<"# of events = "<<nEvents<<endl;

	    for(long eventCounter = 0; eventCounter < nEvents; eventCounter++)
	  {
	    if (debug)
	      cout<<"event = "<<eventCounter<<"\t nHits="<<nHits<<endl;
	    chain->GetEvent(eventCounter);

	    calibrationBarL1Hit = 0;
 	    calibrationBarL2Hit = 0;
 	    calibrationBarL3Hit = 0;
	    calibration_Det36_Hit = 0;	    
	    for(int h = 0; h < nHits; h++)
	      {
		//		nHits.Fill(nHits);
		if ((*moduleID)[h] == 4 || (*moduleID)[h] == 11 || (*moduleID)[h] == 18)
		  calibrationBarL1Hit = 1;
		if ((*moduleID)[h] == 28 || (*moduleID)[h] == 35 || (*moduleID)[h] == 42)
		  calibrationBarL2Hit = 1;
		if ((*moduleID)[h] == 42 || (*moduleID)[h] == 59 || (*moduleID)[h] == 66)
		  calibrationBarL3Hit = 1;
		if ((*moduleID)[h] == 36)
		  calibration_Det36_Hit = 1;
	      }
	    //41 - 3.4 ns
	    //42 - 4.0 ns
	    //43 - 4.6 ns
	    //44 - 5.1 ns
	    //45 - 5.7 ns
	    //46 - 6.3 ns
	    //47 - 6.9 ns
	    for(int h = 0; h < nHits; h++){
	      if ((*moduleID)[h]>1)
		{
		  double totdistance = 4.8;
		  if ((*moduleID)[h]>=24)
		    totdistance += 0.06;
		  if ((*moduleID)[h]>=48)
		    totdistance += 0.06;
	      double posdep = TMath::Power(0.042*((*moduleID)[h]-11+0.5),2)+totdistance*totdistance;
	      posdep = TMath::Sqrt(posdep);
	      posdep -= totdistance;
	      //	      cout<<(0.042*((*moduleID)[h]-11))<<"\t"<<posdep<<endl;
	      tofCalib = (*tofRaw)[h]-timeoffset[(*moduleID)[h]]-TMath::Abs(posdep/3.*10.);
		//		if ((*moduleID)[h]>=2 && (*moduleID)[h]<23)
		//		if ((*moduleID)[h]>=24 && (*moduleID)[h]<48)
	      //		if ((*moduleID)[h]>=48 && (*moduleID)[h]<72)
	      //		  hTof.Fill(tofCalib);
		//		if (calibration_Det36_Hit)
	       
		float tot = TMath::Sqrt((*tot0)[h] * (*tot1)[h]);
			hTotVsTof.Fill(tofCalib, tot);
			    // -40,20
			    // 50 300
			    //			     if ((*tofRaw)[h]>-50 && (*tofRaw)[h]<20)
			    //if ((*tofRaw)[h]>50 && (*tofRaw)[h]<300)
			if ((tofCalib>-50) && (tofCalib<60) && (tot<10))
			      {
			hModuleIDVsTDiff.Fill(((*tDiff)[h]-offset[(*moduleID)[h]]),(*moduleID)[h]);
			if ((*moduleID)[h]<72) hTof.Fill(tofCalib);
  hTofVsModuleID.Fill((*moduleID)[h], tofCalib);
				hModuleIDVsTDiffL1.Fill(((*tDiff)[h]-offset[(*moduleID)[h]]),(*moduleID)[h]);
			    if (calibrationBarL2Hit)
			      hModuleIDVsTDiffL1gated.Fill(((*tDiff)[h]-offset[(*moduleID)[h]]),(*moduleID)[h]);
			  }
			
			if ((*moduleID)[h]>=24 && (*moduleID)[h]<48)
			  {
			  hModuleIDVsTDiffL2.Fill(((*tDiff)[h]-offset[(*moduleID)[h]]),(*moduleID)[h]);
			  if (calibrationBarL1Hit)
			    hModuleIDVsTDiffL2gated.Fill(((*tDiff)[h]-offset[(*moduleID)[h]]),(*moduleID)[h]);
			  }
			if ((*moduleID)[h]>=48 && (*moduleID)[h]<72)
			  {
			    hModuleIDVsTDiffL3.Fill(((*tDiff)[h]-offset[(*moduleID)[h]]),(*moduleID)[h]);
			    if (calibrationBarL3Hit)
			      hModuleIDVsTDiffL3gated.Fill(((*tDiff)[h]-offset[(*moduleID)[h]]),(*moduleID)[h]);
			  }
			  }
			//			if ((*moduleID)[h]>23 && *moduleID[h]<48)
			//			  hModuleIDVsTDiff.Fill((*tDiff)[h],(*moduleID)[h]);
			
			
	    }
	  }
	    hTof.GetXaxis()->SetRangeUser(-20,50);
	    // initialize canvas
	TString canTitle(directory);
	canTitle += "    ";
	canTitle += std::to_string(nEvents).c_str();
	canTitle += " events";
	TCanvas* can = new TCanvas("can", canTitle, 1000, 900);
	can->cd();
	can->Divide(2,2);
	// configure the individual pads
	/*
	  for(int i = 1; i < 5; i++){
		can->cd(i);
		gPad->SetTicks();
		gPad->SetRightMargin(0.15);
		gPad->SetLeftMargin(0.15);
	}
	*/
	// draw histograms
	can->cd(1);
	hTof.DrawClone();
	can->cd(2);
	hTofVsModuleID.DrawClone("colz");
	can->cd(3);
	hTotVsTof.DrawClone("colz");
	can->cd(4);
	hModuleIDVsTDiff.DrawClone("colz");



	TCanvas* can2 = new TCanvas("can2", canTitle, 1000, 900);
	can2->Divide(2,3);
	can2->cd(1);
	hModuleIDVsTDiffL1gated.Draw("colz");
	can2->cd(3);
	hModuleIDVsTDiffL2gated.Draw("colz");
	can2->cd(5);
	hModuleIDVsTDiffL2gated.Draw("colz");
	can2->cd(2);
	hModuleIDVsTDiffL1.Draw("colz");
	can2->cd(4);
	hModuleIDVsTDiffL2.Draw("colz");
	can2->cd(6);
	hModuleIDVsTDiffL2.Draw("colz");
	
	TH1F *hModuleIDVsTDiffL1_d[10];
	TH1F *hModuleIDVsTDiffL2_d[10];
	TH1F *hModuleIDVsTDiffL3_d[10];
	for (int i=0; i<5; i++)
	  {
	    TString nn = "_d";
	    nn+= (i+4);
	    hModuleIDVsTDiffL1_d[i]= (TH1F*)hModuleIDVsTDiffL1.ProjectionX(("hModuleIDVsTDiffL1_d"+nn).Data(),i+5,i+5);
	    hModuleIDVsTDiffL1_d[i]->SetLineWidth(2);

	    hModuleIDVsTDiffL2_d[i]= (TH1F*)hModuleIDVsTDiffL2.ProjectionX(("hModuleIDVsTDiffL2_d"+nn).Data(),i+5,i+5);
	    hModuleIDVsTDiffL2_d[i]->SetLineWidth(2);

	    hModuleIDVsTDiffL3_d[i]= (TH1F*)hModuleIDVsTDiffL3.ProjectionX(("hModuleIDVsTDiffL3_d"+nn).Data(),i+5,i+5);
	    hModuleIDVsTDiffL3_d[i]->SetLineWidth(2);

	    nn = "_d";
	    nn+= (i+15);
	    hModuleIDVsTDiffL1_d[5+i]= (TH1F*)hModuleIDVsTDiffL1.ProjectionX(("hModuleIDVsTDiffL1_d"+nn).Data(),i+16,i+16);
	    hModuleIDVsTDiffL1_d[5+i]->SetLineWidth(2);

	    hModuleIDVsTDiffL2_d[5+i]= (TH1F*)hModuleIDVsTDiffL2.ProjectionX(("hModuleIDVsTDiffL2_d"+nn).Data(),i+16,i+16);
	    hModuleIDVsTDiffL2_d[5+i]->SetLineWidth(2);

	  	    hModuleIDVsTDiffL3_d[5+i]= (TH1F*)hModuleIDVsTDiffL3.ProjectionX(("hModuleIDVsTDiffL3_d"+nn).Data(),i+16,i+16);
	    hModuleIDVsTDiffL3_d[5+i]->SetLineWidth(2);
}
	hModuleIDVsTDiffL1_d[0]->SetLineColor(kRed);
	hModuleIDVsTDiffL1_d[1]->SetLineColor(kBlue);
	hModuleIDVsTDiffL1_d[2]->SetLineColor(kGreen+2);
	hModuleIDVsTDiffL1_d[3]->SetLineColor(kBlack);
	hModuleIDVsTDiffL1_d[4]->SetLineColor(kOrange);

	hModuleIDVsTDiffL1_d[5]->SetLineColor(kRed);
	hModuleIDVsTDiffL1_d[6]->SetLineColor(kBlue);
	hModuleIDVsTDiffL1_d[7]->SetLineColor(kGreen+2);
	hModuleIDVsTDiffL1_d[8]->SetLineColor(kBlack);
	hModuleIDVsTDiffL1_d[9]->SetLineColor(kOrange);


	hModuleIDVsTDiffL2_d[0]->SetLineColor(kRed);
	hModuleIDVsTDiffL2_d[1]->SetLineColor(kBlue);
	hModuleIDVsTDiffL2_d[2]->SetLineColor(kGreen+2);
	hModuleIDVsTDiffL2_d[3]->SetLineColor(kBlack);
	hModuleIDVsTDiffL2_d[4]->SetLineColor(kOrange);

	hModuleIDVsTDiffL2_d[5]->SetLineColor(kRed);
	hModuleIDVsTDiffL2_d[6]->SetLineColor(kBlue);
	hModuleIDVsTDiffL2_d[7]->SetLineColor(kGreen+2);
	hModuleIDVsTDiffL2_d[8]->SetLineColor(kBlack);
	hModuleIDVsTDiffL2_d[9]->SetLineColor(kOrange);


	hModuleIDVsTDiffL3_d[0]->SetLineColor(kRed);
	hModuleIDVsTDiffL3_d[1]->SetLineColor(kBlue);
	hModuleIDVsTDiffL3_d[2]->SetLineColor(kGreen+2);
	hModuleIDVsTDiffL3_d[3]->SetLineColor(kBlack);
	hModuleIDVsTDiffL3_d[4]->SetLineColor(kOrange);

	hModuleIDVsTDiffL3_d[5]->SetLineColor(kRed);
	hModuleIDVsTDiffL3_d[6]->SetLineColor(kBlue);
	hModuleIDVsTDiffL3_d[7]->SetLineColor(kGreen+2);
	hModuleIDVsTDiffL3_d[8]->SetLineColor(kBlack);
	hModuleIDVsTDiffL3_d[9]->SetLineColor(kOrange);

	bool showgaponly = 0;

	TCanvas* can3 = new TCanvas("can3", canTitle, 1000, 600);
	can3->Divide(2,1);
	can3->cd(1);
	hModuleIDVsTDiffL1_d[0]->SetMaximum(1.05*hModuleIDVsTDiffL1_d[4]->GetMaximum());
	hModuleIDVsTDiffL1_d[0]->GetXaxis()->SetTitle("#Delta t");	
	hModuleIDVsTDiffL1_d[0]->GetYaxis()->SetTitle("counts");	
	hModuleIDVsTDiffL1_d[0]->GetXaxis()->SetRangeUser(-9,9);
	hModuleIDVsTDiffL1_d[0]->SetTitle("#Delta t spectra for detectors in layer 1");
	hModuleIDVsTDiffL1_d[0]->Draw();	
	if (!showgaponly)
	    hModuleIDVsTDiffL1_d[1]->Draw("same");	
	hModuleIDVsTDiffL1_d[2]->Draw("same");	
	if (!showgaponly)
	  hModuleIDVsTDiffL1_d[3]->Draw("same");	
	hModuleIDVsTDiffL1_d[4]->Draw("same");	

	//41 - 3.4 ns
	//42 - 4.0 ns
	//43 - 4.6 ns
	//44 - 5.1 ns
	//45 - 5.7 ns
	//46 - 6.3 ns
	//47 - 6.9 ns
	TLine *ld41 = new TLine(3.4, 0, 3.4,1.05*hModuleIDVsTDiffL1_d[4]->GetMaximum());
	TLine *ld42 = new TLine(4.0, 0, 4.0,1.05*hModuleIDVsTDiffL1_d[4]->GetMaximum());
	TLine *ld43 = new TLine(4.6, 0, 4.6,1.05*hModuleIDVsTDiffL1_d[4]->GetMaximum());
	TLine *ld44 = new TLine(5.1, 0, 5.1,1.05*hModuleIDVsTDiffL1_d[4]->GetMaximum());
	TLine *ld45 = new TLine(5.7, 0, 5.7,1.05*hModuleIDVsTDiffL1_d[4]->GetMaximum());
	TLine *ld46 = new TLine(6.3, 0, 6.3,1.05*hModuleIDVsTDiffL1_d[4]->GetMaximum());
	TLine *ld47 = new TLine(6.9, 0, 6.9,1.05*hModuleIDVsTDiffL1_d[4]->GetMaximum());

	ld41->SetLineColor(kGray+1);
	ld42->SetLineColor(kGray+1);
	ld43->SetLineColor(kGray+1);
	ld44->SetLineColor(kGray+1);
	ld45->SetLineColor(kGray+1);
	ld46->SetLineColor(kGray+1);
	ld47->SetLineColor(kGray+1);

	ld41->SetLineStyle(3);
	ld42->SetLineStyle(3);
	ld43->SetLineStyle(3);
	ld44->SetLineStyle(3);
	ld45->SetLineStyle(3);
	ld46->SetLineStyle(3);
	ld47->SetLineStyle(3);
	ld41->Draw("same");
	ld42->Draw("same");
	ld43->Draw("same");
	ld44->Draw("same");
	ld45->Draw("same");
	ld46->Draw("same");
	ld47->Draw("same");

	
	TLegend *leg3 = new TLegend(0.15,0.75,0.35,0.88);
	leg3->SetTextSize(0.03);
	leg3->SetBorderSize(0);
	leg3->AddEntry(hModuleIDVsTDiffL1_d[0],"l1 det 4","l");
	if (!showgaponly)
	  leg3->AddEntry(hModuleIDVsTDiffL1_d[1],"l1 det 5","l");
	leg3->AddEntry(hModuleIDVsTDiffL1_d[2],"l1 det 6 (shadow bar)","l");
	if (!showgaponly)
	  leg3->AddEntry(hModuleIDVsTDiffL1_d[3],"l1 det 7","l");
	leg3->AddEntry(hModuleIDVsTDiffL1_d[4],"l1 det 8","l");
	leg3->Draw();
	
	can3->cd(2);
	hModuleIDVsTDiffL1_d[5]->SetMaximum(1.05*hModuleIDVsTDiffL1_d[7]->GetMaximum());
	hModuleIDVsTDiffL1_d[5]->GetXaxis()->SetTitle("#Delta t");	
	hModuleIDVsTDiffL1_d[5]->GetYaxis()->SetTitle("counts");	
	hModuleIDVsTDiffL1_d[5]->GetXaxis()->SetRangeUser(-9,9);
	hModuleIDVsTDiffL1_d[5]->SetTitle("#Delta t spectra for detectors in layer 1");
	hModuleIDVsTDiffL1_d[5]->Draw();	
	if (!showgaponly)
	  hModuleIDVsTDiffL1_d[6]->Draw("same");	
	hModuleIDVsTDiffL1_d[7]->Draw("same");	
	if (!showgaponly)
	  hModuleIDVsTDiffL1_d[8]->Draw("same");	
	hModuleIDVsTDiffL1_d[9]->Draw("same");	

	//41 - 3.4 ns
	//42 - 4.0 ns
	//43 - 4.6 ns
	//44 - 5.1 ns
	//45 - 5.7 ns
	//46 - 6.3 ns
	//47 - 6.9 ns
	TLine *ldu41 = new TLine(3.4, 0, 3.4,1.05*hModuleIDVsTDiffL1_d[7]->GetMaximum());
	TLine *ldu42 = new TLine(4.0, 0, 4.0,1.05*hModuleIDVsTDiffL1_d[7]->GetMaximum());
	TLine *ldu43 = new TLine(4.6, 0, 4.6,1.05*hModuleIDVsTDiffL1_d[7]->GetMaximum());
	TLine *ldu44 = new TLine(5.1, 0, 5.1,1.05*hModuleIDVsTDiffL1_d[7]->GetMaximum());
	TLine *ldu45 = new TLine(5.7, 0, 5.7,1.05*hModuleIDVsTDiffL1_d[7]->GetMaximum());
	TLine *ldu46 = new TLine(6.3, 0, 6.3,1.05*hModuleIDVsTDiffL1_d[7]->GetMaximum());
	TLine *ldu47 = new TLine(6.9, 0, 6.9,1.05*hModuleIDVsTDiffL1_d[7]->GetMaximum());
	ldu41->SetLineColor(kGray+1);
	ldu42->SetLineColor(kGray+1);
	ldu43->SetLineColor(kGray+1);
	ldu44->SetLineColor(kGray+1);
	ldu45->SetLineColor(kGray+1);
	ldu46->SetLineColor(kGray+1);
	ldu47->SetLineColor(kGray+1);
	ldu41->SetLineStyle(3);
	ldu42->SetLineStyle(3);
	ldu43->SetLineStyle(3);
	ldu44->SetLineStyle(3);
	ldu45->SetLineStyle(3);
	ldu46->SetLineStyle(3);
	ldu47->SetLineStyle(3);
	ldu41->Draw("same");
	ldu42->Draw("same");
	ldu43->Draw("same");
	ldu44->Draw("same");
	ldu45->Draw("same");
	ldu46->Draw("same");
	ldu47->Draw("same");
	
	TLegend *leg33 = new TLegend(0.15,0.75,0.35,0.88);
	leg33->SetTextSize(0.03);
	leg33->SetBorderSize(0);
	//	leg33->SetBorderMode(0);
	leg33->AddEntry(hModuleIDVsTDiffL1_d[5],"l1 det 15","l");
	if (!showgaponly)
	  leg33->AddEntry(hModuleIDVsTDiffL1_d[6],"l1 det 16","l");
	leg33->AddEntry(hModuleIDVsTDiffL1_d[7],"l1 det 17 (shadow bar)","l");
	if (!showgaponly)
	  leg33->AddEntry(hModuleIDVsTDiffL1_d[8],"l1 det 18","l");
	leg33->AddEntry(hModuleIDVsTDiffL1_d[9],"l1 det 19","l");
	leg33->Draw();

	//xx
	TCanvas* can3_3 = new TCanvas("can3_3", canTitle, 1000, 600);
	can3_3->Divide(2,1);
	can3_3->cd(1);
	hModuleIDVsTDiffL3_d[0]->SetMaximum(1.05*hModuleIDVsTDiffL3_d[4]->GetMaximum());
	hModuleIDVsTDiffL3_d[0]->GetXaxis()->SetTitle("#Delta t");	
	hModuleIDVsTDiffL3_d[0]->GetYaxis()->SetTitle("counts");	
	hModuleIDVsTDiffL3_d[0]->GetXaxis()->SetRangeUser(-9,9);
	hModuleIDVsTDiffL3_d[0]->SetTitle("#Delta t spectra for detectors in layer 3");
	hModuleIDVsTDiffL3_d[0]->Draw();	
	if (!showgaponly)
	    hModuleIDVsTDiffL3_d[1]->Draw("same");	
	hModuleIDVsTDiffL3_d[2]->Draw("same");	
	if (!showgaponly)
	  hModuleIDVsTDiffL3_d[3]->Draw("same");	
	hModuleIDVsTDiffL3_d[4]->Draw("same");	

	
	TLegend *leg3_3 = new TLegend(0.15,0.75,0.35,0.88);
	leg3_3->SetTextSize(0.03);
	leg3_3->SetBorderSize(0);
	leg3_3->AddEntry(hModuleIDVsTDiffL3_d[0],"l3 det 4","l");
	if (!showgaponly)
	  leg3_3->AddEntry(hModuleIDVsTDiffL3_d[1],"l3 det 5","l");
	leg3_3->AddEntry(hModuleIDVsTDiffL3_d[2],"l3 det 6 (shadow bar)","l");
	if (!showgaponly)
	  leg3_3->AddEntry(hModuleIDVsTDiffL3_d[3],"l3 det 7","l");
	leg3_3->AddEntry(hModuleIDVsTDiffL3_d[4],"l3 det 8","l");
	leg3_3->Draw();
	
	can3_3->cd(2);
	hModuleIDVsTDiffL3_d[5]->SetMaximum(1.05*hModuleIDVsTDiffL3_d[7]->GetMaximum());
	hModuleIDVsTDiffL3_d[5]->GetXaxis()->SetTitle("#Delta t");	
	hModuleIDVsTDiffL3_d[5]->GetYaxis()->SetTitle("counts");	
	hModuleIDVsTDiffL3_d[5]->GetXaxis()->SetRangeUser(-9,9);
	hModuleIDVsTDiffL3_d[5]->SetTitle("#Delta t spectra for detectors in layer 3");
	hModuleIDVsTDiffL3_d[5]->Draw();	
	if (!showgaponly)
	  hModuleIDVsTDiffL3_d[6]->Draw("same");	
	hModuleIDVsTDiffL3_d[7]->Draw("same");	
	if (!showgaponly)
	  hModuleIDVsTDiffL3_d[8]->Draw("same");	
	hModuleIDVsTDiffL3_d[9]->Draw("same");	

	
	TLegend *leg33_3 = new TLegend(0.15,0.75,0.35,0.88);
	leg33_3->SetTextSize(0.03);
	leg33_3->SetBorderSize(0);
	//	leg33->SetBorderMode(0);
	leg33_3->AddEntry(hModuleIDVsTDiffL3_d[5],"l3 det 15","l");
	if (!showgaponly)
	  leg33_3->AddEntry(hModuleIDVsTDiffL3_d[6],"l3 det 16","l");
	leg33_3->AddEntry(hModuleIDVsTDiffL3_d[7],"l3 det 17 (shadow bar)","l");
	if (!showgaponly)
	  leg33_3->AddEntry(hModuleIDVsTDiffL3_d[8],"l3 det 18","l");
	leg33_3->AddEntry(hModuleIDVsTDiffL3_d[9],"l3 det 19","l");
	leg33_3->Draw();
	//xx
	
	//xx
	TCanvas* can3_2 = new TCanvas("can3_2", canTitle, 1000, 600);
	can3_2->Divide(2,1);
	can3_2->cd(1);
	hModuleIDVsTDiffL2_d[0]->SetMaximum(1.05*hModuleIDVsTDiffL2_d[4]->GetMaximum());
	hModuleIDVsTDiffL2_d[0]->GetXaxis()->SetTitle("#Delta t");	
	hModuleIDVsTDiffL2_d[0]->GetYaxis()->SetTitle("counts");	
	hModuleIDVsTDiffL2_d[0]->GetXaxis()->SetRangeUser(-9,9);
	hModuleIDVsTDiffL2_d[0]->SetTitle("#Delta t spectra for detectors in layer 3");
	hModuleIDVsTDiffL2_d[0]->Draw();	
	if (!showgaponly)
	    hModuleIDVsTDiffL2_d[1]->Draw("same");	
	hModuleIDVsTDiffL2_d[2]->Draw("same");	
	if (!showgaponly)
	  hModuleIDVsTDiffL2_d[3]->Draw("same");	
	hModuleIDVsTDiffL2_d[4]->Draw("same");	

	
	TLegend *leg3_2 = new TLegend(0.15,0.75,0.35,0.88);
	leg3_2->SetTextSize(0.03);
	leg3_2->SetBorderSize(0);
	leg3_2->AddEntry(hModuleIDVsTDiffL2_d[0],"L2 det 4","l");
	if (!showgaponly)
	  leg3_2->AddEntry(hModuleIDVsTDiffL2_d[1],"L2 det 5","l");
	leg3_2->AddEntry(hModuleIDVsTDiffL2_d[2],"L2 det 6 (shadow bar)","l");
	if (!showgaponly)
	  leg3_2->AddEntry(hModuleIDVsTDiffL2_d[3],"L2 det 7","l");
	leg3_2->AddEntry(hModuleIDVsTDiffL2_d[4],"L2 det 8","l");
	leg3_2->Draw();
	
	can3_2->cd(2);
	hModuleIDVsTDiffL2_d[5]->SetMaximum(1.05*hModuleIDVsTDiffL2_d[7]->GetMaximum());
	hModuleIDVsTDiffL2_d[5]->GetXaxis()->SetTitle("#Delta t");	
	hModuleIDVsTDiffL2_d[5]->GetYaxis()->SetTitle("counts");	
	hModuleIDVsTDiffL2_d[5]->GetXaxis()->SetRangeUser(-9,9);
	hModuleIDVsTDiffL2_d[5]->SetTitle("#Delta t spectra for detectors in layer 3");
	hModuleIDVsTDiffL2_d[5]->Draw();	
	if (!showgaponly)
	  hModuleIDVsTDiffL2_d[6]->Draw("same");	
	hModuleIDVsTDiffL2_d[7]->Draw("same");	
	if (!showgaponly)
	  hModuleIDVsTDiffL2_d[8]->Draw("same");	
	hModuleIDVsTDiffL2_d[9]->Draw("same");	

	
	TLegend *leg33_2 = new TLegend(0.15,0.75,0.35,0.88);
	leg33_2->SetTextSize(0.03);
	leg33_2->SetBorderSize(0);
	//	leg33->SetBorderMode(0);
	leg33_2->AddEntry(hModuleIDVsTDiffL2_d[5],"L2 det 15","l");
	if (!showgaponly)
	  leg33_2->AddEntry(hModuleIDVsTDiffL2_d[6],"L2 det 16","l");
	leg33_2->AddEntry(hModuleIDVsTDiffL2_d[7],"L2 det 17 (shadow bar)","l");
	if (!showgaponly)
	  leg33_2->AddEntry(hModuleIDVsTDiffL2_d[8],"L2 det 18","l");
	leg33_2->AddEntry(hModuleIDVsTDiffL2_d[9],"L2 det 19","l");
	leg33_2->Draw();
	//xx
	TCanvas* can4 = new TCanvas("can4", canTitle, 1000, 600);
	can4->Divide(3,1);
	can4->cd(1);
	TH1F * hTofVsModuleID_d[72];
	  double toff[72];
	TF1 *ftemp[72];
	for (int i=0; i<72; i++)
	  {
	    cout<<"############### detector = "<<i<<endl;
	    toff[i] = 0;
	    TString nnn = "_d";
	    nnn+= (i);

	    hTofVsModuleID_d[i] = (TH1F*)hTofVsModuleID.ProjectionY(("hTofVsModuleID_d"+nnn).Data(),i+1,i+1);
	    hTofVsModuleID_d[i]->Rebin(10);
	    hTofVsModuleID_d[i]->GetXaxis()->SetRangeUser(-12,-50);
	    /*
	      hTofVsModuleID_d[i]->Fit("landau");
		    ftemp[i]=  (TF1*)hTofVsModuleID_d[i]->GetListOfFunctions()->FindObject("landau");
		    toff[i] = ftemp[i]->GetParameter(1);
		    */
	  }
	//	for (int i=0; i<72; i++)
	//	  cout<<i<<"\t"<<i<<"\t"<<offset[i]<<"\t"<<toff[i]<<endl;
	
	// save canvases
	TFile* fileOut = new TFile(TString(filenameOut) + ".root", "recreate");
	hModuleIDVsTDiffL1gated.Write();
	hModuleIDVsTDiffL2gated.Write();
	hModuleIDVsTDiffL3gated.Write();
	hModuleIDVsTDiffL1.Write();
	hModuleIDVsTDiffL2.Write();
	hModuleIDVsTDiffL3.Write();
	hModuleIDVsTDiff.Write();

	hTof.Write();
	hTofVsModuleID.Write();
	hTotVsTof.Write();

	for (int i=0; i<9; i++)
	  {
	    hModuleIDVsTDiffL1_d[i]->Write();
	    hModuleIDVsTDiffL3_d[i]->Write();
	  }
		for (int i=0; i<72; i++)
		  hTofVsModuleID_d[i]->Write();
	can->Write();
	can2->Write();
	can3->Write();
	can3_2->Write();
	can3_3->Write();
	can->Print(TString(filenameOut) + ".png");
	can3->Print(TString(filenameOut) + "_l1_deltat.png");
	can3_3->Print(TString(filenameOut) + "_l3_deltat.png");
	can3_2->Print(TString(filenameOut) + "_l2_deltat.png");
	
}
